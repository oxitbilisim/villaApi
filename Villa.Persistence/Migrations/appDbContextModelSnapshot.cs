// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Villa.Persistence;

#nullable disable

namespace Villa.Persistence.Migrations
{
    [DbContext(typeof(appDbContext))]
    partial class appDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "22f6f622-026e-447d-a7f1-a8567e4ecd64",
                            ConcurrencyStamp = "0dbd8a77-3c77-4d78-8dce-ef68a20f00bf",
                            Name = "sistemadmin",
                            NormalizedName = "SISTEMADMIN"
                        },
                        new
                        {
                            Id = "c8e07e19-1d75-486a-b793-6709d4258efb",
                            ConcurrencyStamp = "225235b0-d7c6-4b83-a2f5-9c8d6749d485",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Value");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Villa.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Villa.Domain.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Eposta")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("TelefonGSM")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ea043644-2df4-4d64-8207-bc7f2678e701",
                            AccessFailedCount = 0,
                            Ad = "Mehmet",
                            ConcurrencyStamp = "d03fc011-ece3-41fa-b8f4-062ca8b4b070",
                            Email = "sistemAdmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c2933f2-198d-4021-b20f-c9c06aa58a5e",
                            Soyad = "YILMAZ",
                            TwoFactorEnabled = false,
                            UserName = "sistemAdmin"
                        },
                        new
                        {
                            Id = "53dfe509-1145-4bca-af33-dc57f5270dd8",
                            AccessFailedCount = 0,
                            Ad = "Ali",
                            ConcurrencyStamp = "f3257f5d-03cf-4d5f-bfa2-0a0505702fcf",
                            Email = "iladmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1d8c1a5f-963f-4807-97fe-a2a1396fbae6",
                            Soyad = "DERİN",
                            TwoFactorEnabled = false,
                            UserName = "iladmin"
                        });
                });

            modelBuilder.Entity("Villa.Domain.Entities.Bolge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("Baslik")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IlId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Map")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("IlId");

                    b.ToTable("Bolge");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Etiket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Etiket");
                });

            modelBuilder.Entity("Villa.Domain.Entities.EtiketDetay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("AdresId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EtiketId")
                        .HasColumnType("integer");

                    b.Property<int>("EtiketTipi")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("EtiketId");

                    b.ToTable("EtiketDetay");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Il", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Kod")
                        .HasColumnType("text");

                    b.Property<int>("Sira")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Il");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Ilce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IlId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("IlId");

                    b.ToTable("Ilce");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Kategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("Baslik")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Etiket")
                        .HasColumnType("text");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Tipi")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Kategori");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("integer");

                    b.Property<string>("RouteLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            Icon = "pi pi-fw pi-globe",
                            IsDeleted = false,
                            Label = "Panel",
                            RouteLink = "/"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            Icon = "fa fa-gavel",
                            IsDeleted = false,
                            Label = "Kullanıcı",
                            RouteLink = "/kullanıcı"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            Icon = "fa fa-balance-scale",
                            IsDeleted = false,
                            Label = "Kullanıcı Grup",
                            RouteLink = "/kullanicigrup"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            Icon = "pi pi-fw pi-id-card",
                            IsDeleted = false,
                            Label = "Tanımlar",
                            RouteLink = "/tanimlar"
                        });
                });

            modelBuilder.Entity("Villa.Domain.Entities.MenuPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Mulk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Mulk");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Ozellik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Ozellik");
                });

            modelBuilder.Entity("Villa.Domain.Entities.ParaBirimi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ParaBirimi");
                });

            modelBuilder.Entity("Villa.Domain.Entities.PeriyodikFiyat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Baslangic")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Bitis")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EnAzKiralama")
                        .HasColumnType("integer");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("numeric");

                    b.Property<int>("FiyatTuru")
                        .HasColumnType("integer");

                    b.Property<int>("Indirim")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("VillaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VillaId");

                    b.ToTable("PeriyodikFiyat");
                });

            modelBuilder.Entity("Villa.Domain.Entities.PeriyodikFiyatAyarlari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Depozito")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Kapora")
                        .HasColumnType("integer");

                    b.Property<int>("Komisyon")
                        .HasColumnType("integer");

                    b.Property<bool>("KrediKartTahsilat")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MinumumUcret")
                        .HasColumnType("numeric");

                    b.Property<int>("ParaBirimiId")
                        .HasColumnType("integer");

                    b.Property<decimal>("TemizlikUcreti")
                        .HasColumnType("numeric");

                    b.Property<int>("VillaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ParaBirimiId");

                    b.HasIndex("VillaId");

                    b.ToTable("PeriyodikFiyatAyarlari");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Genel.All"
                        },
                        new
                        {
                            Id = 2,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Ayarlar.All"
                        },
                        new
                        {
                            Id = 3,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Kategori.All"
                        },
                        new
                        {
                            Id = 4,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Bolge.All"
                        },
                        new
                        {
                            Id = 5,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Rezarvasyon.All"
                        },
                        new
                        {
                            Id = 6,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Credential.All"
                        },
                        new
                        {
                            Id = 7,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Grup.All"
                        },
                        new
                        {
                            Id = 8,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Il.All"
                        },
                        new
                        {
                            Id = 9,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Ilce.All"
                        },
                        new
                        {
                            Id = 10,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Kullanici.All"
                        },
                        new
                        {
                            Id = 11,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.KullaniciGrup.All"
                        },
                        new
                        {
                            Id = 12,
                            Active = true,
                            IsDeleted = false,
                            Name = "Permissions.Log.All"
                        });
                });

            modelBuilder.Entity("Villa.Domain.Entities.Villa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("Adres")
                        .HasColumnType("text");

                    b.Property<int?>("BanyoSayisi")
                        .HasColumnType("integer");

                    b.Property<string>("Baslik")
                        .HasColumnType("text");

                    b.Property<int>("BolgeId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HvlUzaklik")
                        .HasColumnType("text");

                    b.Property<string>("Icerik")
                        .HasColumnType("text");

                    b.Property<int>("IlceId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("Kapasite")
                        .HasColumnType("integer");

                    b.Property<string>("Map")
                        .HasColumnType("text");

                    b.Property<string>("Mevki")
                        .HasColumnType("text");

                    b.Property<string>("MrkUzaklik")
                        .HasColumnType("text");

                    b.Property<int?>("OdaSayisi")
                        .HasColumnType("integer");

                    b.Property<string>("PljUzaklik")
                        .HasColumnType("text");

                    b.Property<string>("RstUzaklik")
                        .HasColumnType("text");

                    b.Property<string>("SglUzaklik")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.Property<int?>("YatakOdaSayisi")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BolgeId");

                    b.HasIndex("IlceId");

                    b.ToTable("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaGorunum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Etiket")
                        .HasColumnType("text");

                    b.Property<string>("HavuzOzellik")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OneCikanOzellik")
                        .HasColumnType("text");

                    b.Property<int>("VillaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaGorunum");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaGosterim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Gosterim")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("VillaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaGosterim");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("SiraNo")
                        .HasColumnType("integer");

                    b.Property<bool>("Url")
                        .HasColumnType("boolean");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("text");

                    b.Property<int>("VillaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaImage");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaKategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("KategoriId")
                        .HasColumnType("integer");

                    b.Property<int>("VillaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaKategori");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaOzellik", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OzellikId")
                        .HasColumnType("integer");

                    b.Property<int>("VillaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OzellikId");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaOzellik");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaSeo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("AnahtarKelime")
                        .HasColumnType("text");

                    b.Property<string>("Baslik")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HtmlMetaEtiket")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("VillaId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaSeo");
                });

            modelBuilder.Entity("Villa.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("Villa.Domain.Auth.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Bolge", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Il", "Il")
                        .WithMany("Bolge")
                        .HasForeignKey("IlId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Il");
                });

            modelBuilder.Entity("Villa.Domain.Entities.EtiketDetay", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Etiket", "Etiket")
                        .WithMany("EtiketDetay")
                        .HasForeignKey("EtiketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etiket");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Ilce", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Il", "Il")
                        .WithMany("Ilce")
                        .HasForeignKey("IlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Il");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Menu", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Menu", "ParentMenu")
                        .WithMany("items")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Villa.Domain.Entities.MenuPermission", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Menu");

                    b.HasOne("Villa.Domain.Entities.Permission", "Permission")
                        .WithMany("MenuPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Permission_MenuPermission");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Villa.Domain.Entities.PeriyodikFiyat", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Villa", "Villa")
                        .WithMany("PeriyodikFiyat")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.PeriyodikFiyatAyarlari", b =>
                {
                    b.HasOne("Villa.Domain.Entities.ParaBirimi", "ParaBirimi")
                        .WithMany("PeriyodikFiyatAyarlari")
                        .HasForeignKey("ParaBirimiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Villa.Domain.Entities.Villa", "Villa")
                        .WithMany("PeriyodikFiyatAyarlari")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParaBirimi");

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Villa", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Bolge", "Bolge")
                        .WithMany()
                        .HasForeignKey("BolgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Villa.Domain.Entities.Ilce", "Ilce")
                        .WithMany("Villa")
                        .HasForeignKey("IlceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bolge");

                    b.Navigation("Ilce");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaGorunum", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Villa", "Villa")
                        .WithMany("VillaGorunum")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaGosterim", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Villa", "Villa")
                        .WithMany("VillaGosterim")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaImage", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Villa", "Villa")
                        .WithMany("VillaImage")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaKategori", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Kategori", "Kategori")
                        .WithMany("VillaKategori")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Villa.Domain.Entities.Villa", "Villa")
                        .WithMany("VillaKategori")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaOzellik", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Ozellik", "Ozellik")
                        .WithMany("VillaOzellik")
                        .HasForeignKey("OzellikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Villa.Domain.Entities.Villa", "Villa")
                        .WithMany("VillaOzellik")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ozellik");

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.VillaSeo", b =>
                {
                    b.HasOne("Villa.Domain.Entities.Villa", "Villa")
                        .WithMany("VillaSeo")
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Auth.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Etiket", b =>
                {
                    b.Navigation("EtiketDetay");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Il", b =>
                {
                    b.Navigation("Bolge");

                    b.Navigation("Ilce");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Ilce", b =>
                {
                    b.Navigation("Villa");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Kategori", b =>
                {
                    b.Navigation("VillaKategori");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuPermission");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Ozellik", b =>
                {
                    b.Navigation("VillaOzellik");
                });

            modelBuilder.Entity("Villa.Domain.Entities.ParaBirimi", b =>
                {
                    b.Navigation("PeriyodikFiyatAyarlari");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Permission", b =>
                {
                    b.Navigation("MenuPermission");
                });

            modelBuilder.Entity("Villa.Domain.Entities.Villa", b =>
                {
                    b.Navigation("PeriyodikFiyat");

                    b.Navigation("PeriyodikFiyatAyarlari");

                    b.Navigation("VillaGorunum");

                    b.Navigation("VillaGosterim");

                    b.Navigation("VillaImage");

                    b.Navigation("VillaKategori");

                    b.Navigation("VillaOzellik");

                    b.Navigation("VillaSeo");
                });
#pragma warning restore 612, 618
        }
    }
}
