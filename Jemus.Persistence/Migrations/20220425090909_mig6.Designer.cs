// <auto-generated />
using System;
using Jemus.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jemus.Persistence.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20220425090909_mig6")]
    partial class mig6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jemus.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Jemus.Domain.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Ou")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PbikId")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("TelefonGSM")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fba9e190-a994-4290-b92a-a73462f8cd9c",
                            AccessFailedCount = 0,
                            Ad = "Mehmet",
                            ConcurrencyStamp = "c3b40ec1-3eb9-4565-9f2f-41f44b1875be",
                            Email = "sistemAdmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fec4d05-cc30-4b00-8e24-d613c7afdc66",
                            Soyad = "YILMAZ",
                            TwoFactorEnabled = false,
                            UserName = "sistemAdmin"
                        },
                        new
                        {
                            Id = "a112ee59-60a4-4287-a7ec-58a282363d3e",
                            AccessFailedCount = 0,
                            Ad = "Ali",
                            ConcurrencyStamp = "cc33a6b6-f114-48c6-9565-86260830c4b3",
                            Email = "iladmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5a7363b7-b438-4183-b4fe-0a1a02636beb",
                            Soyad = "DERİN",
                            TwoFactorEnabled = false,
                            UserName = "iladmin"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.files_merkez", b =>
                {
                    b.Property<string>("aciklama")
                        .HasColumnType("text");

                    b.Property<string>("boylam")
                        .HasColumnType("text");

                    b.Property<long>("clientid")
                        .HasColumnType("bigint");

                    b.Property<string>("clientname")
                        .HasColumnType("text");

                    b.Property<string>("confidence")
                        .HasColumnType("text");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("detectionnumber")
                        .HasColumnType("text");

                    b.Property<string>("dogrulukorani")
                        .HasColumnType("text");

                    b.Property<string>("enlem")
                        .HasColumnType("text");

                    b.Property<string>("filepath")
                        .HasColumnType("text");

                    b.Property<long>("gedoid")
                        .HasColumnType("bigint");

                    b.Property<string>("hiz")
                        .HasColumnType("text");

                    b.Property<string>("il")
                        .HasColumnType("text");

                    b.Property<string>("islemtipi")
                        .HasColumnType("text");

                    b.Property<bool?>("isprocessed")
                        .HasColumnType("boolean");

                    b.Property<string>("marka")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("plaka")
                        .HasColumnType("text");

                    b.Property<string>("plakakoordinati")
                        .HasColumnType("text");

                    b.Property<string>("plakaokumasayisi")
                        .HasColumnType("text");

                    b.Property<string>("ptsyonu")
                        .HasColumnType("text");

                    b.Property<string>("renk")
                        .HasColumnType("text");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.Property<string>("sakincadurumu")
                        .HasColumnType("text");

                    b.Property<string>("tescilcinsi")
                        .HasColumnType("text");

                    b.Property<string>("tescilmarka")
                        .HasColumnType("text");

                    b.Property<string>("tescilmodel")
                        .HasColumnType("text");

                    b.Property<string>("tescilrenk")
                        .HasColumnType("text");

                    b.Property<string>("tescilsinif")
                        .HasColumnType("text");

                    b.Property<string>("tesciltip")
                        .HasColumnType("text");

                    b.Property<string>("tescilyil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("tescilzamani")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("tip")
                        .HasColumnType("text");

                    b.Property<string>("ulke")
                        .HasColumnType("text");

                    b.Property<string>("yonbilgisi")
                        .HasColumnType("text");

                    b.ToTable("files_merkez");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Il", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Kod")
                        .HasColumnType("text");

                    b.Property<int>("Sira")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Il");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Ilce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IlId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IlId");

                    b.ToTable("Ilce");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("RouteLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7b517f65-724a-49db-9523-c506ae6afa27"),
                            Icon = "pi pi-fw pi-globe",
                            Label = "Panel",
                            RouteLink = "/"
                        },
                        new
                        {
                            Id = new Guid("6ed5ee03-7983-44fb-8860-3c06b6cc1a4a"),
                            Icon = "fa fa-gavel",
                            Label = "Kullanıcı",
                            RouteLink = "/kullanıcı"
                        },
                        new
                        {
                            Id = new Guid("50b1f015-03a9-4935-9d30-90e8c49966d3"),
                            Icon = "fa fa-balance-scale",
                            Label = "Kullanıcı Grup",
                            RouteLink = "/kullanicigrup"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.MenuPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc4297b8-227e-4eca-9c4d-09eae0e7b823"),
                            Name = "Permissions.Genel.All"
                        },
                        new
                        {
                            Id = new Guid("e7ff1cce-6c15-4c7c-b15f-7b1b58c7fbf1"),
                            Name = "Permissions.Ayarlar.All"
                        },
                        new
                        {
                            Id = new Guid("f559fc1c-1114-4bfa-b967-5d9d092dcd43"),
                            Name = "Permissions.Credential.All"
                        },
                        new
                        {
                            Id = new Guid("7724e663-96d0-4274-b920-878d230b0bb2"),
                            Name = "Permissions.Grup.All"
                        },
                        new
                        {
                            Id = new Guid("4cd26874-a50b-4538-9ae9-46886f8b4df3"),
                            Name = "Permissions.Il.All"
                        },
                        new
                        {
                            Id = new Guid("9db02143-390c-4416-8df7-cbf2aff54292"),
                            Name = "Permissions.Ilce.All"
                        },
                        new
                        {
                            Id = new Guid("41ae1b63-2ce8-42b0-b1db-e55e73715ab8"),
                            Name = "Permissions.Kullanici.All"
                        },
                        new
                        {
                            Id = new Guid("82578bb7-86ba-43fa-8a76-da864051fbc1"),
                            Name = "Permissions.KullaniciGrup.All"
                        },
                        new
                        {
                            Id = new Guid("5188dbc3-9f30-43d8-a64f-43686450325c"),
                            Name = "Permissions.Log.All"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.SorumlulukAlani", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentSorumlulukAlaniId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentSorumlulukId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tanim")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentSorumlulukAlaniId");

                    b.ToTable("SorumlulukAlani");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3ca52bc8-e54b-4795-bb5b-c4c7aadb1551",
                            ConcurrencyStamp = "b1d4796b-cfab-45af-836f-497d5ca4cecd",
                            Name = "sıstemadmın",
                            NormalizedName = "SISTEMADMIN"
                        },
                        new
                        {
                            Id = "1c90fa1d-af09-4ab4-bede-094f72319140",
                            ConcurrencyStamp = "e625c018-3cda-462d-bfa8-1b1b1e05bba2",
                            Name = "ıladmın",
                            NormalizedName = "ILADMIN"
                        },
                        new
                        {
                            Id = "27606f01-90ee-4afc-97b2-224c7f2a7c50",
                            ConcurrencyStamp = "1334b932-658c-4ae3-a95e-28bf48fb31b8",
                            Name = "ılceadmın",
                            NormalizedName = "ILCEADMIN"
                        },
                        new
                        {
                            Id = "23566e7c-d445-4336-a8a7-276d5c391ac8",
                            ConcurrencyStamp = "22dcfa75-41af-4899-898e-2fec370e1a2e",
                            Name = "karakol",
                            NormalizedName = "KARAKOL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Value");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Jemus.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("Jemus.Domain.Auth.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Ilce", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Il", "Il")
                        .WithMany("Ilce")
                        .HasForeignKey("IlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Il");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Menu", "ParentMenu")
                        .WithMany("items")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Jemus.Entities.Models.MenuPermission", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Menu", "Menu")
                        .WithMany("MenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Menu");

                    b.HasOne("Jemus.Entities.Models.Permission", "Permission")
                        .WithMany("MenuPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MenuPermission");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.SorumlulukAlani", b =>
                {
                    b.HasOne("Jemus.Entities.Models.SorumlulukAlani", "ParentSorumlulukAlani")
                        .WithMany("items")
                        .HasForeignKey("ParentSorumlulukAlaniId");

                    b.Navigation("ParentSorumlulukAlani");
                });

            modelBuilder.Entity("Jemus.Domain.Auth.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Il", b =>
                {
                    b.Navigation("Ilce");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.Navigation("MenuPermission");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Permission", b =>
                {
                    b.Navigation("MenuPermission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.SorumlulukAlani", b =>
                {
                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
