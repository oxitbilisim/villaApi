// <auto-generated />
using System;
using Jemus.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jemus.Persistence.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20220420065959_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jemus.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Jemus.Entities.Models.files_merkez", b =>
                {
                    b.Property<string>("aciklama")
                        .HasColumnType("text");

                    b.Property<string>("boylam")
                        .HasColumnType("text");

                    b.Property<long>("clientid")
                        .HasColumnType("bigint");

                    b.Property<string>("clientname")
                        .HasColumnType("text");

                    b.Property<string>("confidence")
                        .HasColumnType("text");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("detectionnumber")
                        .HasColumnType("text");

                    b.Property<string>("dogrulukorani")
                        .HasColumnType("text");

                    b.Property<string>("enlem")
                        .HasColumnType("text");

                    b.Property<string>("filepath")
                        .HasColumnType("text");

                    b.Property<long>("gedoid")
                        .HasColumnType("bigint");

                    b.Property<string>("hiz")
                        .HasColumnType("text");

                    b.Property<string>("il")
                        .HasColumnType("text");

                    b.Property<string>("islemtipi")
                        .HasColumnType("text");

                    b.Property<bool?>("isprocessed")
                        .HasColumnType("boolean");

                    b.Property<string>("marka")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("plaka")
                        .HasColumnType("text");

                    b.Property<string>("plakakoordinati")
                        .HasColumnType("text");

                    b.Property<string>("plakaokumasayisi")
                        .HasColumnType("text");

                    b.Property<string>("ptsyonu")
                        .HasColumnType("text");

                    b.Property<string>("renk")
                        .HasColumnType("text");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.Property<string>("sakincadurumu")
                        .HasColumnType("text");

                    b.Property<string>("tescilcinsi")
                        .HasColumnType("text");

                    b.Property<string>("tescilmarka")
                        .HasColumnType("text");

                    b.Property<string>("tescilmodel")
                        .HasColumnType("text");

                    b.Property<string>("tescilrenk")
                        .HasColumnType("text");

                    b.Property<string>("tescilsinif")
                        .HasColumnType("text");

                    b.Property<string>("tesciltip")
                        .HasColumnType("text");

                    b.Property<string>("tescilyil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("tescilzamani")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("tip")
                        .HasColumnType("text");

                    b.Property<string>("ulke")
                        .HasColumnType("text");

                    b.Property<string>("yonbilgisi")
                        .HasColumnType("text");

                    b.ToTable("files_merkez");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tanim")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Group");

                    b.HasData(
                        new
                        {
                            Id = new Guid("69b0c7f1-a457-4404-ba32-c9304b1fe44e"),
                            Ad = "SistemAdmin",
                            Tanim = "SistemAdmin"
                        },
                        new
                        {
                            Id = new Guid("b65a6e1e-5df1-4000-8e8f-19ca5b2f1cce"),
                            Ad = "IlAdmin",
                            Tanim = "IlAdmin"
                        },
                        new
                        {
                            Id = new Guid("c54a120c-a3ca-4fee-b333-4ad17f44fd9c"),
                            Ad = "IlceAdmin",
                            Tanim = "IlceAdmin"
                        },
                        new
                        {
                            Id = new Guid("41057b45-4437-4ef8-8e1c-d79b4f33b822"),
                            Ad = "Karakol",
                            Tanim = "Karakol"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.GroupClaims", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PermissionId");

                    b.ToTable("GroupClaims");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Il", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Kod")
                        .HasColumnType("text");

                    b.Property<int>("Sira")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Il");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Ilce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IlId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IlId");

                    b.ToTable("Ilce");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("RouteLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85ee0c38-11a5-4642-87f1-ed8e378ab1a6"),
                            Icon = "pi pi-fw pi-globe",
                            Label = "Panel",
                            RouteLink = "/"
                        },
                        new
                        {
                            Id = new Guid("0aa947e4-d4af-4bcf-9b41-8df29182fbe1"),
                            Icon = "fa fa-gavel",
                            Label = "Kullanıcı",
                            RouteLink = "/kullanıcı"
                        },
                        new
                        {
                            Id = new Guid("2a8dc175-cc48-451e-b316-7befcf98dd7b"),
                            Icon = "fa fa-balance-scale",
                            Label = "Kullanıcı Grup",
                            RouteLink = "/kullanicigrup"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.MenuPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("83dcc63b-e8cd-4115-ad81-a65c29084c72"),
                            Name = "Permissions.Genel.All"
                        },
                        new
                        {
                            Id = new Guid("8f680ce8-d47e-4c52-a84e-5b9515a76f1e"),
                            Name = "Permissions.Ayarlar.All"
                        },
                        new
                        {
                            Id = new Guid("f5fc1295-03d6-4497-af44-6da5bf4e24ac"),
                            Name = "Permissions.Credential.All"
                        },
                        new
                        {
                            Id = new Guid("780a3b3a-47a2-4135-ad3b-48ee50388c5f"),
                            Name = "Permissions.Grup.All"
                        },
                        new
                        {
                            Id = new Guid("8d8a8942-1597-4b6a-bf18-3c81e10febeb"),
                            Name = "Permissions.Il.All"
                        },
                        new
                        {
                            Id = new Guid("a85801c7-d02b-4f50-b117-6de8a5724678"),
                            Name = "Permissions.Ilce.All"
                        },
                        new
                        {
                            Id = new Guid("bd664ece-1cad-46b7-8ee0-fba7157758e5"),
                            Name = "Permissions.Kullanici.All"
                        },
                        new
                        {
                            Id = new Guid("e3b7310e-8d9f-4a76-80ee-60bfb10130d0"),
                            Name = "Permissions.KullaniciGrup.All"
                        },
                        new
                        {
                            Id = new Guid("f5ec7e6b-0361-4c84-95b7-f18698e6fe3c"),
                            Name = "Permissions.Log.All"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.UserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId1")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserGrup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d59a1830-4ea6-4948-8d4d-cbe602802bec",
                            ConcurrencyStamp = "8f498514-1cb5-4729-a0ad-fc814ed6a890",
                            Name = "sıstemadmın",
                            NormalizedName = "SISTEMADMIN"
                        },
                        new
                        {
                            Id = "6c50f24a-5151-4d5d-ba5c-73cf6536f2a9",
                            ConcurrencyStamp = "aa951862-31ff-4f05-b1b9-08becd36dee6",
                            Name = "ıladmın",
                            NormalizedName = "ILADMIN"
                        },
                        new
                        {
                            Id = "3db197d1-3baf-42ca-a3e0-084663d3ea2e",
                            ConcurrencyStamp = "2765501f-afdc-4425-9b97-28d3d8c1a57d",
                            Name = "ılceadmın",
                            NormalizedName = "ILCEADMIN"
                        },
                        new
                        {
                            Id = "1e7c6cb8-b840-4b75-9964-35eb82dd5861",
                            ConcurrencyStamp = "96cd6a3d-7351-40d6-bdfc-64c30230be35",
                            Name = "karakol",
                            NormalizedName = "KARAKOL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Value");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Jemus.Domain.Auth.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("Eposta")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("SicilNo")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("TCKN")
                        .HasColumnType("text");

                    b.Property<string>("TelefonGSM")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "722323ab-3633-4622-8843-b35dd42271c5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7424b7e0-7f6b-4ce1-a03f-d8cb03287d9d",
                            Email = "sistemAdmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d08900d-1dc2-4afb-9a30-f64ffe2b26f2",
                            TwoFactorEnabled = false,
                            UserName = "sistemAdmin",
                            FirstName = "sistemAdmin",
                            LastName = "sistemAdmin"
                        },
                        new
                        {
                            Id = "a59744e2-2fcb-496c-8192-b62aa65d5131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a70ed1bc-045f-4c7f-b395-4d296cfe0389",
                            Email = "iladmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "585bf34f-a3bb-4529-acee-938cf4879d7b",
                            TwoFactorEnabled = false,
                            UserName = "iladmin",
                            FirstName = "iladmin",
                            LastName = "User"
                        });
                });

            modelBuilder.Entity("Jemus.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("Jemus.Domain.Auth.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Jemus.Entities.Models.GroupClaims", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Group", "Group")
                        .WithMany("GroupClaims")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jemus.Entities.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Ilce", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Il", "Il")
                        .WithMany("Ilce")
                        .HasForeignKey("IlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Il");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Menu", "ParentMenu")
                        .WithMany("items")
                        .HasForeignKey("ParentMenuId");

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Jemus.Entities.Models.MenuPermission", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Menu", "Menu")
                        .WithMany("MenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jemus.Entities.Models.Permission", "Permission")
                        .WithMany("MenuPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.UserGroup", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Group", "Grup")
                        .WithMany("KullaniciGroup")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jemus.Domain.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Grup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Group", b =>
                {
                    b.Navigation("GroupClaims");

                    b.Navigation("KullaniciGroup");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Il", b =>
                {
                    b.Navigation("Ilce");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.Navigation("MenuPermission");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Permission", b =>
                {
                    b.Navigation("MenuPermission");
                });

            modelBuilder.Entity("Jemus.Domain.Auth.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
