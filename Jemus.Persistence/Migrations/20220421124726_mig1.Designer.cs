// <auto-generated />
using System;
using Jemus.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jemus.Persistence.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20220421124726_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jemus.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Jemus.Domain.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Eposta")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SicilNo")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("TCKN")
                        .HasColumnType("text");

                    b.Property<string>("TelefonGSM")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6c937a62-8596-4c83-b0f4-c897ebaf8fd3",
                            AccessFailedCount = 0,
                            Ad = "Mehmet",
                            ConcurrencyStamp = "2ee8b2f9-dae1-4448-9f33-854719af19b6",
                            Email = "sistemAdmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7a2918d-5352-48e2-b886-8ad65494011e",
                            Soyad = "YILMAZ",
                            TwoFactorEnabled = false,
                            UserName = "sistemAdmin"
                        },
                        new
                        {
                            Id = "754484b4-b2d3-43c5-8ec3-d587a6935621",
                            AccessFailedCount = 0,
                            Ad = "Ali",
                            ConcurrencyStamp = "37d3760c-12dd-4603-8192-8e8b055f9a19",
                            Email = "iladmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f909284a-fd0b-4288-813a-5c9ca3448415",
                            Soyad = "DERİN",
                            TwoFactorEnabled = false,
                            UserName = "iladmin"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.files_merkez", b =>
                {
                    b.Property<string>("aciklama")
                        .HasColumnType("text");

                    b.Property<string>("boylam")
                        .HasColumnType("text");

                    b.Property<long>("clientid")
                        .HasColumnType("bigint");

                    b.Property<string>("clientname")
                        .HasColumnType("text");

                    b.Property<string>("confidence")
                        .HasColumnType("text");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("detectionnumber")
                        .HasColumnType("text");

                    b.Property<string>("dogrulukorani")
                        .HasColumnType("text");

                    b.Property<string>("enlem")
                        .HasColumnType("text");

                    b.Property<string>("filepath")
                        .HasColumnType("text");

                    b.Property<long>("gedoid")
                        .HasColumnType("bigint");

                    b.Property<string>("hiz")
                        .HasColumnType("text");

                    b.Property<string>("il")
                        .HasColumnType("text");

                    b.Property<string>("islemtipi")
                        .HasColumnType("text");

                    b.Property<bool?>("isprocessed")
                        .HasColumnType("boolean");

                    b.Property<string>("marka")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("plaka")
                        .HasColumnType("text");

                    b.Property<string>("plakakoordinati")
                        .HasColumnType("text");

                    b.Property<string>("plakaokumasayisi")
                        .HasColumnType("text");

                    b.Property<string>("ptsyonu")
                        .HasColumnType("text");

                    b.Property<string>("renk")
                        .HasColumnType("text");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.Property<string>("sakincadurumu")
                        .HasColumnType("text");

                    b.Property<string>("tescilcinsi")
                        .HasColumnType("text");

                    b.Property<string>("tescilmarka")
                        .HasColumnType("text");

                    b.Property<string>("tescilmodel")
                        .HasColumnType("text");

                    b.Property<string>("tescilrenk")
                        .HasColumnType("text");

                    b.Property<string>("tescilsinif")
                        .HasColumnType("text");

                    b.Property<string>("tesciltip")
                        .HasColumnType("text");

                    b.Property<string>("tescilyil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("tescilzamani")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("tip")
                        .HasColumnType("text");

                    b.Property<string>("ulke")
                        .HasColumnType("text");

                    b.Property<string>("yonbilgisi")
                        .HasColumnType("text");

                    b.ToTable("files_merkez");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Il", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Kod")
                        .HasColumnType("text");

                    b.Property<int>("Sira")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Il");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Ilce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IlId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IlId");

                    b.ToTable("Ilce");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("RouteLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1c1dc1c-e346-471e-8141-dc5f9c3c5328"),
                            Icon = "pi pi-fw pi-globe",
                            Label = "Panel",
                            RouteLink = "/"
                        },
                        new
                        {
                            Id = new Guid("703d0bbb-ecdf-4402-9bc1-cf60384fb8ef"),
                            Icon = "fa fa-gavel",
                            Label = "Kullanıcı",
                            RouteLink = "/kullanıcı"
                        },
                        new
                        {
                            Id = new Guid("a553ddbd-219c-457b-a37a-41cf5ec8d7ab"),
                            Icon = "fa fa-balance-scale",
                            Label = "Kullanıcı Grup",
                            RouteLink = "/kullanicigrup"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.MenuPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5042520a-919e-4c1a-8243-3f67690bb9ed"),
                            Name = "Permissions.Genel.All"
                        },
                        new
                        {
                            Id = new Guid("78734159-b68c-4fd6-832a-ec18a6879137"),
                            Name = "Permissions.Ayarlar.All"
                        },
                        new
                        {
                            Id = new Guid("c957e04c-3d3f-4e4b-a7ae-2e3aeee34d29"),
                            Name = "Permissions.Credential.All"
                        },
                        new
                        {
                            Id = new Guid("2e1ada02-ce74-4d99-8fef-31a3798097d7"),
                            Name = "Permissions.Grup.All"
                        },
                        new
                        {
                            Id = new Guid("cffb1f69-709d-471c-9311-610a9c95e819"),
                            Name = "Permissions.Il.All"
                        },
                        new
                        {
                            Id = new Guid("84936a2d-f89d-4789-ab36-c80ca7a7a26e"),
                            Name = "Permissions.Ilce.All"
                        },
                        new
                        {
                            Id = new Guid("fce2c2b6-ffcd-4e72-ba3e-74997a21779b"),
                            Name = "Permissions.Kullanici.All"
                        },
                        new
                        {
                            Id = new Guid("b676d942-f3f7-450d-8e7d-a00b32747256"),
                            Name = "Permissions.KullaniciGrup.All"
                        },
                        new
                        {
                            Id = new Guid("2fbcb26e-7164-46c9-a9e5-6042893cce46"),
                            Name = "Permissions.Log.All"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f363aabf-4825-4581-9215-add6ecfdd666",
                            ConcurrencyStamp = "114e328c-dc28-4e77-9df3-bd6fea157a59",
                            Name = "sıstemadmın",
                            NormalizedName = "SISTEMADMIN"
                        },
                        new
                        {
                            Id = "d6ee5854-7b1a-4b6c-9012-2d6bb615e249",
                            ConcurrencyStamp = "ace32bf5-ed4c-446a-a80c-e128b357227e",
                            Name = "ıladmın",
                            NormalizedName = "ILADMIN"
                        },
                        new
                        {
                            Id = "0eec2cdd-0f20-4017-a657-5e007e0d813b",
                            ConcurrencyStamp = "3e4042a8-bd97-47fe-9cba-deb16d2c69d8",
                            Name = "ılceadmın",
                            NormalizedName = "ILCEADMIN"
                        },
                        new
                        {
                            Id = "9eca2436-a0b8-49d9-bd5f-617bfd1efbce",
                            ConcurrencyStamp = "1e2206ed-baaa-4f4a-99d3-8f3d988f47a5",
                            Name = "karakol",
                            NormalizedName = "KARAKOL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Value");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Jemus.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("Jemus.Domain.Auth.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Ilce", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Il", "Il")
                        .WithMany("Ilce")
                        .HasForeignKey("IlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Il");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Menu", "ParentMenu")
                        .WithMany("items")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Jemus.Entities.Models.MenuPermission", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Menu", "Menu")
                        .WithMany("MenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Menu");

                    b.HasOne("Jemus.Entities.Models.Permission", "Permission")
                        .WithMany("MenuPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MenuPermission");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Jemus.Domain.Auth.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Il", b =>
                {
                    b.Navigation("Ilce");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.Navigation("MenuPermission");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Permission", b =>
                {
                    b.Navigation("MenuPermission");
                });
#pragma warning restore 612, 618
        }
    }
}
