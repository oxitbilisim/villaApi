// <auto-generated />
using System;
using Jemus.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Jemus.Persistence.Migrations
{
    [DbContext(typeof(appDbContext))]
    [Migration("20220425091042_mig7")]
    partial class mig7
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Jemus.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("Jemus.Domain.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("Ou")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PbikId")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Soyad")
                        .HasColumnType("text");

                    b.Property<string>("TelefonGSM")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "11cb33c0-07a2-4d61-a11b-475d8ee7b232",
                            AccessFailedCount = 0,
                            Ad = "Mehmet",
                            ConcurrencyStamp = "faf432d3-647e-4a10-86a7-5707c5940ce1",
                            Email = "sistemAdmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "422e92a2-9a91-4c10-83ba-8f5e43ee9770",
                            Soyad = "YILMAZ",
                            TwoFactorEnabled = false,
                            UserName = "sistemAdmin"
                        },
                        new
                        {
                            Id = "06343529-c613-440f-9228-13bb0ad6f374",
                            AccessFailedCount = 0,
                            Ad = "Ali",
                            ConcurrencyStamp = "94544f16-4a58-4d42-9ff3-73ba0c301350",
                            Email = "iladmin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BASICUSER@GMAIL.COM",
                            NormalizedUserName = "BASICUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEBLjouNqaeiVWbN0TbXUS3+ChW3d7aQIk/BQEkWBxlrdRRngp14b0BIH0Rp65qD6mA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ade44c07-89f1-4e4e-9759-7a9dcfea6031",
                            Soyad = "DERİN",
                            TwoFactorEnabled = false,
                            UserName = "iladmin"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.files_merkez", b =>
                {
                    b.Property<string>("aciklama")
                        .HasColumnType("text");

                    b.Property<string>("boylam")
                        .HasColumnType("text");

                    b.Property<long>("clientid")
                        .HasColumnType("bigint");

                    b.Property<string>("clientname")
                        .HasColumnType("text");

                    b.Property<string>("confidence")
                        .HasColumnType("text");

                    b.Property<DateTime>("datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("detectionnumber")
                        .HasColumnType("text");

                    b.Property<string>("dogrulukorani")
                        .HasColumnType("text");

                    b.Property<string>("enlem")
                        .HasColumnType("text");

                    b.Property<string>("filepath")
                        .HasColumnType("text");

                    b.Property<long>("gedoid")
                        .HasColumnType("bigint");

                    b.Property<string>("hiz")
                        .HasColumnType("text");

                    b.Property<string>("il")
                        .HasColumnType("text");

                    b.Property<string>("islemtipi")
                        .HasColumnType("text");

                    b.Property<bool?>("isprocessed")
                        .HasColumnType("boolean");

                    b.Property<string>("marka")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("plaka")
                        .HasColumnType("text");

                    b.Property<string>("plakakoordinati")
                        .HasColumnType("text");

                    b.Property<string>("plakaokumasayisi")
                        .HasColumnType("text");

                    b.Property<string>("ptsyonu")
                        .HasColumnType("text");

                    b.Property<string>("renk")
                        .HasColumnType("text");

                    b.Property<string>("result")
                        .HasColumnType("text");

                    b.Property<string>("sakincadurumu")
                        .HasColumnType("text");

                    b.Property<string>("tescilcinsi")
                        .HasColumnType("text");

                    b.Property<string>("tescilmarka")
                        .HasColumnType("text");

                    b.Property<string>("tescilmodel")
                        .HasColumnType("text");

                    b.Property<string>("tescilrenk")
                        .HasColumnType("text");

                    b.Property<string>("tescilsinif")
                        .HasColumnType("text");

                    b.Property<string>("tesciltip")
                        .HasColumnType("text");

                    b.Property<string>("tescilyil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("tescilzamani")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("tip")
                        .HasColumnType("text");

                    b.Property<string>("ulke")
                        .HasColumnType("text");

                    b.Property<string>("yonbilgisi")
                        .HasColumnType("text");

                    b.ToTable("files_merkez");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Il", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Kod")
                        .HasColumnType("text");

                    b.Property<int>("Sira")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Il");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Ilce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<string>("Ad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IlId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IlId");

                    b.ToTable("Ilce");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Label")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("ParentMenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("RouteLink")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("51e54d59-15b6-4d9f-b201-08a4f1659995"),
                            Icon = "pi pi-fw pi-globe",
                            Label = "Panel",
                            RouteLink = "/"
                        },
                        new
                        {
                            Id = new Guid("57e0895a-8d97-4ce3-9fa5-985268878524"),
                            Icon = "fa fa-gavel",
                            Label = "Kullanıcı",
                            RouteLink = "/kullanıcı"
                        },
                        new
                        {
                            Id = new Guid("512f807e-e11b-4867-9337-033f0c9d2b68"),
                            Icon = "fa fa-balance-scale",
                            Label = "Kullanıcı Grup",
                            RouteLink = "/kullanicigrup"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.MenuPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("PermissionId");

                    b.ToTable("MenuPermission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permission");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cc48d718-5548-4ebe-8301-1624a1abd3ba"),
                            Name = "Permissions.Genel.All"
                        },
                        new
                        {
                            Id = new Guid("40027706-7eef-4657-89e8-51911c2754b9"),
                            Name = "Permissions.Ayarlar.All"
                        },
                        new
                        {
                            Id = new Guid("c6ce6ba8-df8d-458e-b3f7-d983139bce6f"),
                            Name = "Permissions.Credential.All"
                        },
                        new
                        {
                            Id = new Guid("ce7422cb-58ed-43a0-8bd3-522b14ef0704"),
                            Name = "Permissions.Grup.All"
                        },
                        new
                        {
                            Id = new Guid("0f1304ce-588b-4a2d-8e65-1932065f7da6"),
                            Name = "Permissions.Il.All"
                        },
                        new
                        {
                            Id = new Guid("8ac8853b-5b4f-4d24-ab44-e450b00777de"),
                            Name = "Permissions.Ilce.All"
                        },
                        new
                        {
                            Id = new Guid("b8574c31-d243-4921-8a81-94acce219365"),
                            Name = "Permissions.Kullanici.All"
                        },
                        new
                        {
                            Id = new Guid("9c604913-98fc-463d-884e-a85db6765d9d"),
                            Name = "Permissions.KullaniciGrup.All"
                        },
                        new
                        {
                            Id = new Guid("f0699f26-df86-4b62-a530-396d740af37c"),
                            Name = "Permissions.Log.All"
                        });
                });

            modelBuilder.Entity("Jemus.Entities.Models.SorumlulukAlani", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ParentSorumlulukAlaniId")
                        .HasColumnType("uuid");

                    b.Property<string>("Tanim")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentSorumlulukAlaniId");

                    b.ToTable("SorumlulukAlani");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4ad814a3-29ab-4c69-8d08-12ee06e4941f",
                            ConcurrencyStamp = "1d1f770c-abda-4df1-a785-3d23f9079943",
                            Name = "sıstemadmın",
                            NormalizedName = "SISTEMADMIN"
                        },
                        new
                        {
                            Id = "2a3edd81-c768-4e2c-9ecc-1c28c0512b7e",
                            ConcurrencyStamp = "0f7c00c5-9be9-4f7c-9833-674c9091b3e2",
                            Name = "ıladmın",
                            NormalizedName = "ILADMIN"
                        },
                        new
                        {
                            Id = "a0694adf-7bf0-4375-b61b-8946828184e2",
                            ConcurrencyStamp = "76625d50-83c9-46c0-bed0-012c0d373a64",
                            Name = "ılceadmın",
                            NormalizedName = "ILCEADMIN"
                        },
                        new
                        {
                            Id = "dac3f465-c377-4b74-872f-7b49996f0e10",
                            ConcurrencyStamp = "c062d254-a862-4f6d-8ae2-ad70aad52887",
                            Name = "karakol",
                            NormalizedName = "KARAKOL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ProviderKey");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UserId", "Value");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Jemus.Domain.Auth.RefreshToken", b =>
                {
                    b.HasOne("Jemus.Domain.Auth.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Ilce", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Il", "Il")
                        .WithMany("Ilce")
                        .HasForeignKey("IlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Il");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Menu", "ParentMenu")
                        .WithMany("items")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("Jemus.Entities.Models.MenuPermission", b =>
                {
                    b.HasOne("Jemus.Entities.Models.Menu", "Menu")
                        .WithMany("MenuPermission")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Menu");

                    b.HasOne("Jemus.Entities.Models.Permission", "Permission")
                        .WithMany("MenuPermission")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MenuPermission");

                    b.Navigation("Menu");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.SorumlulukAlani", b =>
                {
                    b.HasOne("Jemus.Entities.Models.SorumlulukAlani", "ParentSorumlulukAlani")
                        .WithMany("items")
                        .HasForeignKey("ParentSorumlulukAlaniId");

                    b.Navigation("ParentSorumlulukAlani");
                });

            modelBuilder.Entity("Jemus.Domain.Auth.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Il", b =>
                {
                    b.Navigation("Ilce");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Menu", b =>
                {
                    b.Navigation("MenuPermission");

                    b.Navigation("items");
                });

            modelBuilder.Entity("Jemus.Entities.Models.Permission", b =>
                {
                    b.Navigation("MenuPermission");
                });

            modelBuilder.Entity("Jemus.Entities.Models.SorumlulukAlani", b =>
                {
                    b.Navigation("items");
                });
#pragma warning restore 612, 618
        }
    }
}
